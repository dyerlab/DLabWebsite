{
  "hash": "2208685467d2883b234b98b6e26e9199",
  "result": {
    "markdown": "---\ntitle: \"3-D topographies in R\"\ndescription: |\n  A short description of the post.\ndate: 2021-12-15\n---\n\n\n![](featured.png)\n\n\n\n\n\n\nThis is going to require the `rayshader` library to get some orthorgraphic imagery of topologies.  This will be a quick \n\n\n## Install Packages If Necessary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor( lib in c(\"rayshader\",\"magick\") ) { \n  if( !require(lib) ) { \n    install.packages(lib)\n  }\n}\n\nif( !require(webshot2 ) ) { \n  remotes::install_github(\"rstudio/webshot2\")\n}\n```\n:::\n\n\n\n## The Data\n\nFor this example, I'm going to use a section of Baja California, in the vacinity of the town of Loreto, BCS.\n\n\n::: {.cell layout=\"l-screen-inset\"}\n::: {.cell-output-display}\n![](https://live.staticflickr.com/65535/51747403237_94a3f1f029_o_d.jpg)\n:::\n:::\n\n\nWe can load it in using the direct url and crop it to the approximate size of the area of interest.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary( rayshader )\nlibrary( raster )\n```\n:::\n\n\nI have a raster up on github for my [teaching](https://dyerlab.github.io/ENVS-Lectures) site that we'll use.\n\n\n\n\n::: {.cell hash='threeD-topographies-in-r_cache/html/unnamed-chunk-4_c649092906ab48ac640062ea3fb0f136'}\n\n```{.r .cell-code}\nurl <- \"https://github.com/dyerlab/ENVS-Lectures/raw/master/data/alt_22.tif\"\nraster::raster( url ) %>%\n  raster::crop(extent( -112, -110.5, 25, 26.5) ) -> baja_california\nplot( baja_california ) \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNow, we should probably reproject the raster.  Right now, the datum for it is defined as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs( baja_california )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\nDeprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs \nWKT2 2019 representation:\nGEOGCRS[\"WGS 84 (with axis order normalized for visualization)\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]],\n    REMARK[\"Axis order reversed compared to EPSG:4326\"]] \n```\n:::\n:::\n\n\nWhich is great.  However, the x- and y- coordinates in this are defined by degrees, whereas the values in it, the z-axis for us below, is defined in the unit of meters.  \n\nLet's reproject this raster (see [lecture here](https://dyerlab.github.io/ENVS-Lectures/spatial/rasters/slides.html#1) if you want to know more about rasters) to a datum whose units are also in meters.  I grabbed the proj.4 definition of [epsg = 6366](https://epsg.io/6366), which covers Mexico west of -114 degrees in zone 11N.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_utm <- raster::projectRaster(baja_california, crs=\"+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in showSRID(uprojargs, format = \"PROJ\", multiline = \"NO\", prefer_proj\n= prefer_proj): Discarded datum Unknown based on GRS80 ellipsoid in Proj4\ndefinition\n```\n:::\n\n```{.r .cell-code}\nbaja_utm \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass      : RasterLayer \ndimensions : 197, 201, 39597  (nrow, ncol, ncell)\nresolution : 838, 926  (x, y)\nextent     : 993606.5, 1162044, 2769727, 2952149  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=11 +ellps=GRS80 +units=m +no_defs \nsource     : memory\nnames      : alt_22 \nvalues     : -202, 1408.906  (min, max)\n```\n:::\n:::\n\n\nBefore I move on, I'm going to smooth out the jaggedness of this a bit [exmaple here](../2021-12-15-smoothing-rasters/smoothing-rasters.html).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmooth_utm <- focal( baja_utm, \n                       w = matrix(1, 3, 3), \n                       fun = mean, \n                       na.rm=TRUE)\npar( mfrow =c(1,2) ) \nplot( baja_utm, legend=FALSE )\nplot( smooth_utm, legend=FALSE ) \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar( mfrow=c(1,1) )\n```\n:::\n\n\nJust taking the 'edge' off, so to speak.  For some reason, one of the islands is denoted as negative elevation, so I'll fix that \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix <- abs( raster_to_matrix( smooth_utm ) )\n```\n:::\n\n\nAnd then clean it up.  This elevation raster was originally provided by [WorldClim](https://worldclim.org), which ignores elevations in the water.  So there is a *ton* of `NA` values for where the Pacific Ocean and Sea of CortÃ©z is located.  I'm going to replace all the `NA` with `0`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum( is.na( baja_matrix )  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20395\n```\n:::\n\n```{.r .cell-code}\nbaja_matrix[ is.na(baja_matrix)] <- 0\n```\n:::\n\n\n\n## Plotting with Shading\n\nThe matrix can now be plot with shading.  There are several built-in palettes (and you can supply your own as well).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture=\"bw\" ) %>%\n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\nThe possible values include:\n\n\n*texture*\n> Default 'imhof1'. Either a square matrix indicating the spherical texture mapping, or a string indicating one of the built-in palettes ('imhof1','imhof2','imhof3','imhof4','desert', 'bw', and 'unicorn').\n\nWhich look like this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"desert\" )  %>% \n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nand this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"imhof2\",\n                sunangle = 45 ) %>%\n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nand this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"imhof3\",\n                sunangle = 45 ) %>%\n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nand this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"imhof4\",\n                sunangle = 45 ) %>%\n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nand of course, there is a unicorn \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"unicorn\",\n                sunangle = 45 ) %>%\n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Adding Water\n\nWater can be represented as either opaque or transparent.  These rasters *do not* have bathymetry data (and I set them all to zero), so I'll this part and just make it a solid color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"desert\",\n                sunangle = 45 ) %>%\n  add_water( detect_water( baja_matrix ), color = \"desert\") %>% \n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Adding Shadows\n\nThere are several different kinds of shadings we can add to a scene.  Here I'll shading from the sun (and setting the angle and altitude).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"desert\",\n                sunangle = 45 ) %>%\n  add_water( detect_water( baja_matrix ), color = \"desert\") %>% \n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nWe can also add onto that ambient shading.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"desert\",\n                sunangle = 45 ) %>%\n  add_water( detect_water( baja_matrix ), color = \"desert\") %>% \n  add_shadow( ray_shade( baja_matrix, \n                         sunangle=82,\n                         sunaltitude = 85), 0.5) %>%\n  add_shadow( ambient_shade( baja_matrix), 0 ) %>%\n  plot_map() \n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Rendering in 3-Space\n\nNow let's make it a bit more interactive.  Unfortunately, you will not be able to see the popup window and use your mouse to move it around as this is being cast onto a static webpage (so run the code yourself). \n\nThe following steps will require that you can plot `rgl` content.  Depending upon your platform, you may need to download a few things.  For example, on OSX, you need to download XQuartz (google it).  I have no idea what you'll need on Windows or Linux.\n\nThis will plot it and then render it appropriately in an external window.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"desert\",\n                sunangle = 45 ) %>%\n  add_water( detect_water( baja_matrix ), color = \"desert\") %>% \n  add_shadow( ray_shade( baja_matrix, \n                         sunangle=82,\n                         sunaltitude = 85), 0.5) %>%\n  add_shadow( ambient_shade( baja_matrix), 0 ) %>%\n  plot_3d( baja_matrix/5, \n           zscale=10,\n           fov=0,\n           theta = 135,\n           zoom = 1, \n           phi = 45, \n           windowsize = c(1000,800))\nSys.sleep(0.2)\nrender_snapshot()\n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\nThe parameters of `plot_3d` include: \n- *zscale:* scaling in the z-axis. \n- *fov:* Field of View.\n- *theta:* Rotation of the landscape.\n- *zoom:*  Zoom  \n- *phi:* Angle at which camera is looking at the landscape\n\nYou'll just have to play around with these to get them to look proper for the landscape you are using.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"desert\",\n                sunangle = 45 ) %>%\n  add_water( detect_water( baja_matrix ), color = \"desert\") %>% \n  add_shadow( ray_shade( baja_matrix, \n                         sunangle=82,\n                         sunaltitude = 85), 0.5) %>%\n  add_shadow( ambient_shade( baja_matrix), 0 ) %>%\n  plot_3d( baja_matrix/5, \n           zscale=10,\n           fov=0,\n           theta = 150,\n           zoom = 0.75, \n           phi = 30, \n           windowsize = c(1000,800))\nSys.sleep(0.2)\nrender_snapshot()\n```\n\n::: {.cell-output-display}\n![](threeD-topographies-in-r_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\nWe can even use multi-pass rendering to make the image a bit better in quality.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaja_matrix %>%\n  sphere_shade( texture = \"desert\",\n                sunangle = 45 ) %>%\n  add_water( detect_water( baja_matrix ), color = \"desert\") %>% \n  add_shadow( ray_shade( baja_matrix, \n                         sunangle=82,\n                         sunaltitude = 85), 0.5) %>%\n  add_shadow( ambient_shade( baja_matrix), 0 ) %>%\n  plot_3d( baja_matrix/5, \n           zscale=10,\n           fov=0,\n           theta = 150,\n           zoom = 0.75, \n           phi = 30, \n           windowsize = c(1000,800))\nSys.sleep(0.2)\nrender_highquality(samples=200, scale_text_size = 24, clear=TRUE)\n```\n:::\n\n\n![](featured.png)\n\n\nThat looks pretty good for a cheap and quick 3d render.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}
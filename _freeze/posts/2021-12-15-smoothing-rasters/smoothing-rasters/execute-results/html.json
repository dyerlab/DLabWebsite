{
  "hash": "a7f7abe7dea12dc7566ac48a362df79e",
  "result": {
    "markdown": "---\ntitle: \"Smoothing rasters\"\ndescription: |\n  Sometimes it is helpful for visualization purposes (or when making a nice graphic), to smooth out a raster image.  Here are some cheap and quick methods.\nauthor:\n  - name: Rodney Dyer\n    url: https://dyerlab.org\n    affiliation: Center for Environmental Studies\n    affiliation_url: https://ces.vcu.edu\n    orcid_id: 0000-0003-4707-3453\ndate: 2021-12-15\npreview: featured.png\noutput:\n  distill::distill_article:\n    self_contained: false\n---\n\n\n![](featured.png)\n\n\n\n\n\nSo let's load in a raster and crop it down to look at it.  Here is the area surrounding Loreto, BCS Mexico as represented by a 1-km resolution raster of elevation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary( raster )\nurl <- \"https://github.com/dyerlab/ENVS-Lectures/raw/master/data/alt_22.tif\"\nraster( url ) %>%\n  crop(extent( -111.6, -111, 25.6, 26.2) ) -> baja_california\nplot( baja_california ) \n```\n\n::: {.cell-output-display}\n![](smoothing-rasters_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nFor simple viewing, we can tell the plot to interpolate it, which will shape it a bit.  This does not change the data, it only shows the data a bit differently.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( baja_california, interpolate = TRUE )\n```\n\n::: {.cell-output-display}\n![](smoothing-rasters_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nWe can also resample the data, which changes it.  We can `disaggregate` it, which makes a new raster with a more fine grain resolution and interpolates the new values to fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloreto_disaggregated <- disaggregate( baja_california, \n                                      fact = 5,\n                                      method = \"bilinear\")\n```\n:::\n\n\nwhich takes the previous raster whose size was:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim( baja_california )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72 72  1\n```\n:::\n:::\n\n\nand makes the new one of size\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim( loreto_disaggregated )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 360 360   1\n```\n:::\n:::\n\n\nas the `fact=5` means that each cell in `baja_california` is turned into a 5x5 set of cells whose values are interpolated.  Notice in the plot below, how the pixelation is reduced around the coast (this raster has all water = `NA`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( loreto_disaggregated )\n```\n\n::: {.cell-output-display}\n![](smoothing-rasters_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nWe can also smooth it using a custom focal operation based upon a matrix of values and a function we define for it.  Here the weight (`w`) matrix is a 5x5 matrix of 1 (defining the values around each spot that will be used) and the `fun=mean` will take the average of the 5x5 matrix of values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloreto_focal <- focal( baja_california, \n                       w = matrix(1, 5, 5), \n                       fun = mean, \n                       na.rm=TRUE)\n```\n:::\n\n\nThis approach *does not* change the resoution of each cell, it only smooths it out.  I also ignored `NA` for those edge cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim( loreto_focal )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72 72  1\n```\n:::\n:::\n\n\nAnd if you look at it, it still has some pixelation (minecraft-i-ness if you will)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( loreto_focal )\n```\n\n::: {.cell-output-display}\n![](smoothing-rasters_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe method you choose is up to you and the consequences of changing the raw data.  Be careful.\n\n",
    "supporting": [
      "smoothing-rasters_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{"title":"Simulating Random Populations","markdown":{"yaml":{"title":"Simulating Random Populations","description":"A short description of the post.\n","author":[{"name":"Rodney Dyer","url":"https://dyerlab.org","affiliation":"Center for Environmental Studies","affiliation_url":"https://ces.vcu.edu","orcid_id":"0000-0003-4707-3453"}],"date":"2019-04-21","output":{"distill::distill_article":{"self_contained":false}}},"containsRefs":false,"markdown":"\n\n\n\n\n\nThe `gstudio` package has routines that can be used to simulate random populations.  I've added these to facilitate more exploratory data analysis.  Here is how you can use them.\n\nIf you have not updated the `gstudio` and `popgraph` packages in a while, you probably should.  Here is how (if it asks if you would like to update the other packages, it is probably a good idea to say yes).\n\n```{r eval=FALSE}\ndevtools::install_github(\"dyerlab/popgraph\")\ndevtools::install_github(\"dyerlab/gstudio\")\n```\n\nThen load it in as:\n\n```{r}\nlibrary(gstudio)\n```\n\nI'm going to start with the enigmatic bark beetle data set.  \n\n```{r}\ndata(arapat)\nsummary(arapat)\n```\n\nTo simulate random data sets we need to start off by determining what allele frequencies you may want.  I'm going to use the stratum-level frequencies from the example data set.  Here is what these look like.\n\n```{r}\nsuppressPackageStartupMessages( library(tidyverse) )\nlibrary(DT)\nfreqs <- frequencies(arapat, stratum=\"Population\")\nhead(freqs)\n```\n\nthough the whole data set has `r nrow(freqs)` rows!\n\nWhat I'm going to do is to create a random dataset from these frequencides.  This dataset will have 20 populations (I'll just grab the first 20 `Stratum` from this frequency matrix).\n\n```{r}\nfreqs %>%\n  filter( Stratum %in% unique(freqs$Stratum)[1:20] ) -> sim_freqs\nsummary(sim_freqs)\n```\n\n\nAnd we can take a quick look at the frequencies across populations for, say *MP20* as:\n\n```{r}\nsim_freqs %>%\n  filter( Locus == \"MP20\", Stratum %in% unique(Stratum)[1:5] ) %>% \n  ggplot( aes(Allele,Frequency)) + \n  geom_bar( stat=\"identity\", position=\"dodge\" )  + \n  facet_grid( Stratum ~ .) + \n  theme_bw()\n```\n\n\nOK.  Now, lets take a look at how we can make a random population.  The `make_population()` function takes a frequency matrix and creates random individuals. Here is an example.\n\n```{r}\nfake101 <- make_population( sim_freqs %>% filter(Stratum==\"101\"), N=100 )\nhead(fake101)\n```\n\n\nThe frequencies should be pretty close to the real ones.  Compare the `LTRS` locus allele frequencies from the simualted data\n\n```{r}\nfrequencies( fake101,loci = \"LTRS\") \n```\n\nand the real data\n\n```{r}\nsim_freqs %>% filter(Locus==\"LTRS\", Stratum==\"101\")\n```\n\nPretty close.  So using this approach, we can make all kinds of allele random populations.  You just need to figure out the allele frequency matrix and then pass that to the appropriate functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n \n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":{"distill::distill_article":{"self_contained":false}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"simulating-random-populations.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.38","theme":"cosmo","title-block-banner":true,"title":"Simulating Random Populations","description":"A short description of the post.\n","author":[{"name":"Rodney Dyer","url":"https://dyerlab.org","affiliation":"Center for Environmental Studies","affiliation_url":"https://ces.vcu.edu","orcid_id":"0000-0003-4707-3453"}],"date":"2019-04-21"},"extensions":{"book":{"multiFile":true}}}}}
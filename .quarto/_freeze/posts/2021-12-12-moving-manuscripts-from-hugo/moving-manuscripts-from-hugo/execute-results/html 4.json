{
  "hash": "f8176c9cfeaaecf7347e2c047128b2f3",
  "result": {
    "markdown": "---\ntitle: \"Moving Manuscripts from Hugo\"\ndescription: |\n  The use of Markdown for your site is very helpful but not alll markdown formats are the same.  Here is how I moved from Hugo to rstudio::distill for the manuscripts section of the lab webpage.\ndate: 12-13-2021\n---\n\n\n\n\nAs part of moving over from [Hugo](https://gohugo.io) to [Distill](https://rstudio.github.io/distill/), I need to move over all my manuscripts.  While putting everything into Markdown is a good idea for portability, there does not seem to be a very quick way to translate YAML.  IN this case, the old YAML looked like this (n.b., they are all .md files, not .Rmd files like distill likes so the syntax hightlighting will not look right):\n\n![OldYAML](OldYAML.png)\n\nWhich will need to be translated into the new YAML to resemble:\n\n![NewYAML](NewYAML.png)\n\nThis may not be that big of an deal but at the end of the day, I've got a ton of folders that each represent each manuscript I've published.  I was able to get a lot of it done using some quick perl like this:\n\n```\nperl -pi -e s/name =/name:/g file.md\n```\n\nHowever, there is going to be a lot of pain associated with some of it (authors & categories sections).  For that, I'll have to run some `R` code.  Here is how I did it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiles <- list.files(path=\"../../_manuscripts\", \n                    recursive = TRUE,\n                    full.names = TRUE,\n                    pattern = \"index.md\")\n```\n:::\n\n\nSo, for each of these files, I need to:  \n\n1. Load markdown file\n2. Save as Rmd\n3. Use some terminal magic to convert over yaml formatting.\n\nSo here it goes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor( file in files ) { \n  newfile <- gsub(\".md\", \".Rmd\", file,perl = TRUE)\n  cmd <- paste(\"mv\",file, newfile )\n  system( cmd )\n}\n```\n:::\n\n\nOK, so that was sufficient for me to get things good enough to compile.  And it looks... meh.\n\n![Nailed it!](ThumbsUp.png)\n\nI put all the manuscripts in its own category and subfolder but it has all the abstract shoved into the description.  However, that causes some issues because some of the abstracts are long and it makes for an unreasonable view of the manuscripts. \n\n![](Listings.png)\n\nand none of the images are showing.  Now we'll have to go through it all and futz around to make it look good.  Here is the whole salchicha.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary( yaml )\nfiles <- list.files(path=\"../../_manuscripts\", \n                    recursive = TRUE,\n                    full.names = TRUE,\n                    pattern = \"index.Rmd\")\n\nfor( file in files ) { \n  print(file)\n  # load in the YAML\n  old <- read_yaml( file )\n  \n  # Make the new file contents\n  new <- c(\"---\",\n           paste(\"title:\", as.yaml(old$title)),\n           paste(\"date:\", as.yaml(old$date ) ) )\n  \n  # make authors for post\n  pub_authors <- unlist( lapply( old$authors, \n                             FUN = function(x) { return(paste(\"- name:\", x))}))\n  new <- c(new, \n           \"authors:\",\n           pub_authors)\n  \n  # put authors, year and publication here.\n  year <- strsplit(old$date, \"-\",fixed = TRUE)[[1]][1]\n  pub <- old$publication\n  \n  description <- paste(\"description: |\")\n  description <- paste( \"   \", pub, year, \" \", sep=\". \")\n\n  new <- c(new,\n           \"description: |\",\n           description)\n  \n  # clean up the categories\n  if( \"categories\" %in% names(old) ) { \n    categories <- tolower( gsub( \"\\\"\", \"\", old$categories ) )\n    new <- c(new, \n             \"categories: \",\n             unlist( lapply( categories, \n                             FUN = function(x) { return(paste(\"-\", x))})))\n  }\n  \n  \n  \n  \n  # put in the Journal \n  if( length( old$publication) > 0 ) { \n    new <- c(new,\n             paste(\"journal: \", old$publication))\n  }\n  \n  if( \"doi\" %in% names( old ) ) { \n    new <- c(new,\n             paste(\"doi: \", old$doi ))\n  }\n  \n  \n  # if there is a bib\n  bibs <- list.files( dirname(file), \n                      pattern = \"*.bib\",\n                      full.names = TRUE)\n  if( length(bibs) == 1 ) { \n    cmd <- paste( \"mv\", \n                  bibs, \n                  paste( dirname(bibs),\n                         \"bibliography.bib\",\n                         sep=\"/\"))\n    system(cmd)\n    new <- c(new,\n             \"bibliography: bibliography.bib\" )\n  }\n  \n  \n  \n  #add end stuff\n  if( \"respository_url\" %in% names( old ) ) { \n    new <- c(new, \n             paste(\"repository_url:\",as.yaml(old$respository_url ) ) )\n  }\n  new <- c( new, \n            paste(\"output:\\n\",as.yaml(old$output)),\n            \"---\",\n            \"\")\n  new <- gsub(\"\\n\\n\", \"\\n\", paste( new, collapse=\"\\n\") ) \n  \n  \n    # put in links to PDF and doi if presnt\n  links <- \"\"\n  if( \"url_pdf\" %in% names( old ) ) { \n    url <- old$url_pdf \n    val <- paste( \"[![PDF Download](https://img.shields.io/badge/PDF-21B02C.svg)](\", url, \")\", sep=\"\")\n    links <- paste( links, val)\n  }\n  \n  if( \"doi\" %in% names( old ) ) { \n    url <- paste(\"https://doi.org\",old$doi, sep=\"/\")\n    val <- paste( \"[![ DOI \", \n                  old$doi, \n                  \"](https://img.shields.io/badge/DOI-474747.svg)](\",\n                  url,\n                  \")\", sep=\"\") \n    links <- paste( links, val )\n  }\n  \n  new <- c( new, links )\n  \n  \n  \n  # Add image if present\n  if( \"featured\" %in% names( old ) ) { \n    img <- paste(\"![](\",old$featured,\")\")\n    new <- c( new, \n              \"\",\n              img )\n  }\n  \n  if( \"description\" %in% names( old ) ) { \n    new <- c(new,\n             \"\",\n             \"## Abstract\",\n             \"\",\n             old$description )\n  }\n\n  #  Previously, I saved to a different file so as to not overwrite the important stuff.\n  #   Once it worked, then write over the old one.\n  # newfile <- paste( dirname(file), \"/manuscript.Rmd\", sep=\"\")\n  write(new, file=file)\n  rmarkdown::render(file)\n  \n}\n```\n:::\n\n\nNow, I've just got to go clean up the old temporary files using something like:\n\n\n> find _manuscripts -iname manuscrip* -delete\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor( file in list.files(path=\"../../_manuscripts\", \n                    recursive = TRUE,\n                    full.names = TRUE,\n                    pattern = \"index.Rmd\") ) { \n  rmarkdown::render( file )\n  }\n```\n:::\n\n\n\n\n![The End](TheEnd.jpeg)\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}
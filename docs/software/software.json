[
  {
    "path": "software/DLabGenetic/",
    "title": "DLabGenetic Swift Package",
    "description": "A swift library package for the analyiss of marker and SNP relevant data types for landscape and population genetic analyses on the iOS and MacOS platforms.",
    "author": [
      {
        "name": "Rodney Dyer",
        "url": "https://dyerlab.org"
      }
    ],
    "date": "2021-12-23",
    "categories": [
      "Swift"
    ],
    "contents": "\n\nDLabGenetic\n\nCurrent Version: 1.0.0\nThis package is the foundation layer for all genetic data analysis objects and routines needed in software developed for the iOS and OSX platforms from the DyerLab.\n # Installation\nSwift Package Manager (XCode 13)\nSelect File > Swift Packages > Add Package Dependency… from the File menu.\nPaste https://github.com/dyerlab/DLGenetic.git in the dialog box.\nFollow the Xcode’s instruction to complete the installation.\n\nWhy not CocoaPods, or Carthage, or blank?\n\nSupporting multiple dependency managers makes maintaining a library exponentially more complicated and time consuming. Since, the Swift Package Manager is integrated with Xcode 11 (and greater), it’s the easiest choice to support going further.\nThis package defines the following objects objects:\nLocus\nIndividual\nAlleleFrequencies\nAnalysis\nThis package depends upon the DLMatrix Swift Package for underlying vector and matrix representations.\nClass Objects\n ## Locus\nThe locus class has the following properties: - id: UUID - alleles:[String] - isHeterozygote:Bool - ploidy:Int - isEmpty:Bool - description:String to conform to CustomStringConvertable\nA Locus object can be constructed as: - init() - init(raw:String) where raw is a string of alleles separated by a colon (e.g., 3:4) - init(from decoder: Decoder) for conformance to Coding\nThis class conforms to the following protocols: - DLMatrix::asVector() - Identifiable - Equatable - Codable - CustomStringConvertible\nOperators overloaded to handle Locus objects include: - - to find the AMOVA distance between the two loci. - == to determine equality of genotypes.\n ## Individual\nThe Individual class holds strata and locus information for a georeferenced individual record.\nThe Individual class as the following properties: - id:UUID - location:CLLocationCoordinate2D - strata:[String:String] - loci:[String:Locus] - description:String to comply with CustomStringConvertable\nAn Individual object can be created as: - init() Makes location as latitude = 0 longitude = 0 - init(from decoder: Decoder) for compliance with Coding\nAn Individual object has the following public functions. - setValueForKey( key: String, value: String) sets either the .strata or .loci objects from the user interface (say table input). Will parse data properly. - dataForKey(key: String) -> String Returns string represetnation of either .strata or .loci object based upon key passed. Returns empty string for non-existant key.\nOverloaded operators for Individual objects include: - - A subtraction operator defines the multilocus AMOVA disance between two individuals.\nExtensions to Array where Element == Individual include the following properties:\nstrataKeys:[String] Returns names of strata.\nallLevels:[String] Returns array of all strata names prepended by “All”\nlocusKeys:[String] The names of the loci\nallKeys:[String] The names of all strata, coordinates, and loci.\nlocations:[CLLocationCoordinate2D] An array of coordinates for all individuals.\ncenter:CLLocationCoordinate2D The centroid of the individuals.\nExtensions to Array where Element == Individual include the following functions: - levelsForStratum(key: String) -> [String] Returns the levels within the stratum. - getLoci( named: String) -> Loucs Returns named Locus or empty one if not existing. - locales( stratum: String, values: [String]) -> [Individual]Grab a subset of indiviudals based upon a particular set of locales. -partition(by: String) -> [String: [Individual] ]Returns a dictionary of indivudals based upon partitions. -frequencyFor(locus: String, stratum: String, level: String) -> AlleleFrequencyReturns anAlleleFrequenciesobject for a particular locale. -individualsAtStratum(stratim: String, level: String) -> [Individual]` Grab a set of individuals for a particular locale.\n ## AlleleFrequencies\n ## Analysis\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-23T05:25:05-05:00",
    "input_file": {}
  },
  {
    "path": "software/DLabMatrix/",
    "title": "DLabMatrix Swift Package",
    "description": "A swift library package with matrix algebraic objects and functions necessary for landscape and population genetic analyses on the iOS and MacOS platforms.",
    "author": [
      {
        "name": "Rodney Dyer",
        "url": "https://dyerlab.org"
      }
    ],
    "date": "2021-12-20",
    "categories": [
      "Swift"
    ],
    "contents": "\n\nDyerlab logoDLabMatrix\n\nCurrent Version: 1.0.1\nThis package is the foundation layer for all matrix algebra routines needed in software developed for the iOS and OSX platforms from the DyerLab. The motivation herenotion here is to provide an abstraction layer relying as much upon the Swift Accelerate framework to allow population genetic and spatial analytic routines to be easily added to any deliverable product.\n ## Installation\nSwift Package Manager (XCode 13)\nSelect File > Swift Packages > Add Package Dependency… from the File menu.\nPaste https://github.com/dyerlab/DLMatrix.git in the dialog box.\nFollow the Xcode’s instruction to complete the installation.\n\nWhy not CocoaPods, or Carthage, or blank?\n\nSupporting multiple dependency managers makes maintaining a library exponentially more complicated and time consuming. Since, the Swift Package Manager is integrated with Xcode 11 (and greater), it’s the easiest choice to support going further.\nThis package defines the following two objects:\nVector A Double vector object representing a single numerical vector.\nMatrix A 2-dimensional matrix object that holds Double types.\nRandom Range Enumerator A quick enumerator to define the range of random numbers to estimate.\nThis packages defines the following general functions:\nGeneralizedInverse() A generalized matrix inverse.\nPCRotation() A principal component analysis function.\nSingularValueDecomposition() An implementation of a Singular Value Decomposition.\n ### Vector Objects\nA Vector object is simple [Double] useable for normal algebraic operations. The\nInstance Variables:\nsum: Double\nmagnitude:Vector The vector length.\nx:Double & y:Double (for length >1 vectors)\nnormal:Vector Normalize vector for length = 1.0\nasCGPoint:CGPoint Quick conversion to CGPoint\nasSCNVector3:SCNVector3 Quick conversion to SCNVector3\nasCovariance: Matrix Converts (presumably) instance of distance to covariance.\nasDistance: Matrix Converts (presumably) instance of covariance matrix to distance.\nStatic Constructors\nzeros(_ length: Int) -> Vector Make a new vector with zeros.\nrandom( length: Int, type: RangeEnum = .uniform_0_1) -> Vector Make a\nInstance Functions\n.distance(other: Vector) -> Double Distance separating two vectors.\n.smallest(other: Vector) -> Vector Returns a Vector with minimal values from each.\n.largest(other: Vector) -> Vector Returns a Vector with maximal values from each.\n.constrain(minimum: Double, maximum: Double) -> Vector Returns vector with values bound on the range [minimum ... maximum]\n.limitAnnealingMagnitude( temp: Double) -> Vector Limits movement vector distance for simulated annealing functions.\nStatic Functions - .designMatrix( strata: [String] ) -> Matrix Returns (N x K) design matrix. - .idempotentHatMatrix( strata: [String] ) -> Matrix Returns N x N idempotent Hat matrix, H.\nOperator Overloads\nThe following operators are defined for the Vector object v:\nv + scalar\nv - scalar\nv * scalar\nv / scalar Scaling of a vector\nv + v Vector elementwise addition\nv - v Vector elementwise subtraction\nv * v Vector elementwise multiplication\nv .* v Vector Multiplication (scalar result)\nv == v Equality\nProtocols\nThe Vector object defines the protocol VectorConvertable which defined the required function asVector() -> Vector to advertise that they can yield a Vector object.\n ### Matrix Objects\nA matrix object is a class that represents a 2-dimensional representation of type Double’s. A Matrix has the following instance variables:\n.rows: Int The number of rows in the matrix.\n.cols: Int The number of columns in the matrix.\nrowNames:[String] Labels for rows in the matrix.\ncolNames:[String] Labels for columns in the matrix.\ndiagonal:Vector The diagonal of the matrix (get, set)\ntrace:Double The trace of the matrix.\nsum:Double The sum of the values in the Matrix.\ntranspose:Matrix Return the transposed version of this matrix.\ndescription:String Conforms to CustomStringConvertible\nConstructors - Matrix(r,c,Vector) Creates a new Matrix with r rows and c columns with values from Vector. - Matrix(r,c,ClosedRange) Creates a new Matrix with r rows and c whose falues are equally spaced along a ClosedRange<Double>. - Matrix(r,c,rowNames,colNames) Creates a new Matrix with r rows and c columns with values set to 0.0 but with the row and column names set by the vectors rowNames and colNames of length r and c (respectively).\nThe following operators are overloaded for an object of type Matrix:\n[row,col]: Double Overload of the subscript operator to access elements withing the Matrix. Asking for values outside the size of the Matrix return Double.nan and setting those outside the size do nothing.\n== Conforms to Equatable\nM + scalar Shift values of a matrix\nM - scalar Shift values of a matrix\nM * scalar Scaling of a matrix\nM / scalar Scaling of a matrix\nM + M Matrix elementwise addition\nM - M Matrix elementwise addition\nM * M Matrix elementwise multiplication\nM .* M Matrix Multiplication\nM / M Matrix elementwise division\nThe following functions are available for Matrix objects: - .center() Centers the values of the matrix to 0.0 - .submatrix([rows],[cols]) -> Matrix Returns submatrix defined by the integer arrays [rows] and [cols]. -\nProtocols\nThe Matrix object defines the protocol MatrixConvertable that defines a required function asMatrix() -> Matrix is to advertise that they can yield a Matrix object.\n ### RangeEnum\nA simple enum defining the following values: - uniform_0_1 A uniform distribution bound to [0.0 ... 1.0]. - uniform_neg1_1 A uniform distribution bound on [-1.0 ... 1.0]. - normal_0_1 A value from the normal probability density function bound on [0 ... 1].\nThis enum conforms to the following protocols: - Int - CaseIterable - Comoparable Defines < operator.\nAlgebraic Functions\n\nGeneralizedInverse( X: Matrix ) -> Matrix\nThis returns a generalized inverse of the original matrix.\n\nPCRotation(X: Matrix) -> (d: Vector, V: Matrix, X: Matrix)?\nPerforms a principal component rotation on the original data matrix X returning the eigenvalues in d, the loadings in V and the predicted projections of the original data in X. If the original matrix was not factorable, no values are returned.\n\nSingularValueDecomposition(A: Matrix) -> (U: Matrix, d: Vector, V: Matrix)?\nPerforms a singular value spectral decomposition on the matrix A resulting in left and right eigenvalues (U and V) as well as eigenvalues in d. If the original matrix was not factorable, no values are returned.\nVersions Highlights\n1.0.3 - Refactoring some stuff. 1.0.2 - added designMatrix, idepotentHatMatrix, asCovariance, asDistance, rowMatrix 1.0.1 - Added Unit tests. 1.0.0 - Intial Import\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-23T04:53:27-05:00",
    "input_file": {}
  },
  {
    "path": "software/DLabSpatial/",
    "title": "DLabSpatial Swift Package",
    "description": "A swift library package for the analysis and display of spatial data for analytical software targeting iOS and MacOS platforms.",
    "author": [
      {
        "name": "Rodney Dyer",
        "url": "https://dyerlab.org"
      }
    ],
    "date": "2021-12-09",
    "categories": [
      "Swift"
    ],
    "contents": "\n\nDyerlab logoDLabSpatial\n\nCurrent Version: 1.0.0\nA package that has all the components for mapping and map overlays used in software created in the Dyer Laboratory for the spatial analysis of genetic structure.\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-23T04:53:27-05:00",
    "input_file": {}
  },
  {
    "path": "software/popgraph/",
    "title": "popgraph R Library Package",
    "description": "An R package for estimation, anslysis, and visualization of Population Graph objects after Dyer & Nason (2014).",
    "author": [
      {
        "name": "Rodney Dyer",
        "url": "https://dyerlab.org"
      }
    ],
    "date": "2021-04-12",
    "categories": [
      "R"
    ],
    "contents": "\npopgraph 1.5\nReleased to CRAN 8 May 2017.\nThis is an R package for creating and manipulating population graph objects useful for spatial landscape and population genetic analyses of genetic marker data. This statistical method is based conditional genetic covariance and has been applied primarily to genetic marker data. Routines in this package integrate the popgraph network objects into spatial objects using the igraph and sp packages.\nFor a complete overview of the package, see the full documentation at http://dyerlab.github.io/popgraph/\nTo install the most recent version of this package,\nrequire(devtools)install_github(\"dyerlab/popgraph\")\nIf you would like to contribute to this package or have any questions regarding its construction, use, or additional functionalities, please contact Rodney J. Dyer or visit his lab page http://dyerlab.org\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-23T04:53:27-05:00",
    "input_file": {}
  },
  {
    "path": "software/gstudio/",
    "title": "gstudio R Library Package",
    "description": "An R package designed to allow the analysis of population genetic data as a native R data type, fully integrated with tidy data paradigms.",
    "author": [
      {
        "name": "Rodney Dyer",
        "url": "https://dyerlab.org"
      }
    ],
    "date": "2019-05-19",
    "categories": [
      "R"
    ],
    "contents": "\ngstudio\nThis is an R package for the spatial analysis of population genetic data.\nFor a complete overview of the package, see the full documentation at http://dyerlab.github.io/gstudio/\nTo install these packages from this repository, fire up R and\ninstall.packages( c(\"RgoogleMaps\",\n                    \"geosphere\",\n                    \"proto\",\n                    \"sampling\",\n                    \"seqinr\",\n                    \"spacetime\",\n                    \"spdep\"), \n                  dependencies=TRUE )\n\nlibrary(devtools)\ninstall_github(\"dyerlab/popgraph\")\ninstall_github(\"dyerlab/gstudio\")\nIf you would like to contribute to this package or have any questions regarding its construction, use, or additional functionalities, please contact Rodney J. Dyer or visit his lab page http://dyerlab.org\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-23T04:53:27-05:00",
    "input_file": {}
  }
]
